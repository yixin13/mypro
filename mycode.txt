#include"DCList.h"

void InitDCList(DCList *list)
{
	Node *s = (Node *)malloc(sizeof(Node));
	list->first = list->last = s;
	list->last->next = list->first;
	list->first->prio = list->last;
	list->size = 0;
}

void push_back(DCList *list,ElemType x)
{
	Node *s = (Node *)malloc(sizeof(Node));
	s->data = x;
	list->last->next = s;
	s->prio = list->last;
	list->last = s;
	list->last->next = list->first;
	list->first->prio = list->last;	
	list->size++;
}

void show_list(DCList *list)
{
	Node *p = list->first->next;
	while(p != list->first)
	{
		cout<<p->data<<"-->";
		p = p->next;
	}
	cout<<"Over!"<<endl;
}

Node* find(DCList *list,ElemType key)
{
	Node *p = list->first->next;
	while(p!=list->first && p->data!=key)
	{
		p = p->next;
	}
	if(p == list->first)
		return NULL;
	else
		return p;
}
void delete_val(DCList *list, ElemType key)
{
	Node *q	= find(list,key);
	if(q == NULL)
	{
		cout<<"要删除的值不存在!"<<endl;
		return;
	}
	if(q == list->last)
	{
		list->last = q->prio;
	}
	q->prio->next = q->next;
	q->next->prio = q->prio;
	free(q);
	list->size--;
}

void insert_val(DCList *list, ElemType x)
{
	//1 find pos
	Node *p = list->first->next; //
	Node *t = p->next;           //
	
	Node *s = (Node *)malloc(sizeof(Node));
	s->data = x;

	if(p->data > x)
	{
		s->next = list->first->next;
		list->first->next->prio = s;
		s->prio = list->first;
		list->first->next = s;
		list->size++;
		return;
	} //
	else if(list->last->data < x)
	{
		s->prio = list->last;
		list->last->next = s;
		list->last = s;
		list->last->next = list->first;
		list->first->prio = list->last;
		list->size++;
		return;
	}
	
	while(p->data<x && t->data<x)
	{
		p = p->next;
		t = p->next;
	}

	s->prio = p;
	p->next = s;
	s->next = t;
	t->prio = s;

	list->size++;
}
